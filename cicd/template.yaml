AWSTemplateFormatVersion: '2010-09-09'

# Parameters for the template. Some of these are retrieved via Systems Manager, stored in the Parameter Store.
# This helps anonymise most of the parameters.
# Defaults have been added as there is the option to add your own parameters with deployment scripts, using --parameter-overrides
Parameters:
  RepositoryName:
    Type: String
    Default: techtest-020424-repo
  BranchName:
    Type: String
    Default: master
  TableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/TableName'
  BackendStackName:
    Type: String
    Default: apigw-backend-techtest-020424-stack
  VPCId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/VPCId'
    Description: The VPC ID where the resources will be deployed.

Resources:
  CodeCommitRepository:
    Type: AWS::CodeCommit::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryDescription: Repository for the techtest-020424 application

  # Requires a buildspec.yml be in the root of the CodeCommit repository branch that the changes are being made from.
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: techtest-020424-build
      Description: Builds the techtest-020424 application
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
      Artifacts:
        Type: CODEPIPELINE

  # IAM Role for the CodeBuild step with relevant permissions
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/techtest-020424-build:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ArtifactStoreBucket}/*
              - Effect: Allow
                Action:
                  - codecommit:GitPull
                Resource: !Sub ${CodeCommitRepository.Arn}
  #  The definition of the pipeline.
  # Depends on the creation of the ArtifactStoreBucket succeeding.
  #  Contains Source, Build, and Deploy stages of the pipeline.
  CodePipeline:
    Type: AWS::CodePipeline::Pipeline
    DependsOn: ArtifactStoreBucket
    Properties:
      Name: techtest-020424-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStores:
        - Region: !Ref AWS::Region
          ArtifactStore:
            Type: S3
            Location: !Ref ArtifactStoreBucket
      Stages:
        - Name: Source
          Actions:
            - Name: CodeCommit
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeCommit
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                RepositoryName: !Ref RepositoryName
                BranchName: !Ref BranchName
                #  Setting this to false ensures that the event trigger is what causes the pipeline to start, instead of the pipeline polling the repo for changes.
                PollForSourceChanges: false
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref BackendStackName
                TemplatePath: BuildOutput::packaged.yaml
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                # Has to be written comma-separated like below, was running into issues (missing capabilities) if not precisely like that.
                Capabilities: CAPABILITY_IAM,CAPABILITY_AUTO_EXPAND,CAPABILITY_NAMED_IAM

  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudFormationDeployPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DescribeStackEvents'
                  - 'cloudformation:DescribeStackResources'
                  - 'cloudformation:GetTemplate'
                  - 'cloudformation:ValidateTemplate'
                  - 'cloudformation:CreateChangeSet'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${BackendStackName}/*'
              - Effect: "Allow"
                Action:
                  - 'cloudformation:CreateChangeSet'
                Resource: !Sub 'arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
              - Effect: Allow
                Action:
                  - 'iam:PassRole'
                  - 'iam:GetRole'
                  - 'iam:TagRole'
                  - 'iam:CreateRole'
                  - 'iam:DeleteRole'
                  - 'iam:AttachRolePolicy'
                  - 'iam:DetachRolePolicy'
                  - 'iam:PutRolePolicy'
                  - 'iam:DeleteRolePolicy'
                Resource:
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/${BackendStackName}-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/apigw-backend-*'
                  - !Sub 'arn:aws:iam::${AWS::AccountId}:role/techtest-*'
              - Effect: Allow
                Action:
                  - 'lambda:CreateFunction'
                  - 'lambda:DeleteFunction'
                  - 'lambda:GetFunction'
                  - 'lambda:GetFunctionConfiguration'
                  - 'lambda:UpdateFunctionCode'
                  - 'lambda:UpdateFunctionConfiguration'
                  - 'lambda:AddPermission'
                  - 'lambda:RemovePermission'
                  - 'lambda:ListTags'
                  - 'lambda:TagResource'
                Resource: !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${BackendStackName}-*'
              - Effect: Allow
                Action:
                  - 'apigateway:*'
                Resource: 
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis'
                  - !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:CreateTable'
                  - 'dynamodb:DeleteTable'
                  - 'dynamodb:DescribeTable'
                  - 'dynamodb:UpdateTable'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${TableName}'
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource:
                  - !Sub 'arn:aws:s3:::${ArtifactStoreBucket}/*'
              - Effect: Allow
                Action:
                  - "ssm:GetParameters"
                Resource: 
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BackendStackName}/VPCId"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BackendStackName}/PrivateSubnets"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BackendStackName}/DynamoDBKMSKeyId"
                  - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${BackendStackName}/TableName"
              - Effect: Allow
                Action: 
                  - "ec2:DeleteSecurityGroup"
                  - "ec2:CreateSecurityGroup"
                Resource: 
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:security-group/*"
                  - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:vpc/${VPCId}"
              - Effect: Allow
                Action:
                  - "ec2:DescribeSecurityGroups"
                  - "ec2:RevokeSecurityGroupEgress"
                  - "ec2:RevokeSecurityGroupIngress"
                  - "ec2:AuthorizeSecurityGroupEgress"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ec2:CreateVpcEndpoint"
                  - "ec2:DescribeVpcEndpoints"
                  # Eventually I added this part, wildcarding the actions as I was running into too many granular errors in the timescale. 
                  # In future I would remove this to make it more along the Principle of Least Privilege.
                  - "ec2:*"
                Resource: "*"
              - Effect: Allow
                Action: 
                  - "kms:*"
                Resource: "*"
                
  # Bucket where the build artifacts get stored during the pipeline.
  ArtifactStoreBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: techtest-020424-artifact-store
      VersioningConfiguration:
        Status: Enabled

  # IAM Role for the CodePipeline pipeline itself.
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                  - codecommit:GetRepository
                Resource: !GetAtt CodeCommitRepository.Arn
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !Sub ${CodeBuildProject.Arn}
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DeleteStack
                  - cloudformation:UpdateStack
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${BackendStackName}/*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${ArtifactStoreBucket}/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/apigw-backend-techtest-020424-*
                  - !Sub arn:aws:iam::${AWS::AccountId}:role/techtest-*

  # IAM Role for the event which triggers the pipeline, namely an update or creation of changes in the master branch.
  EventRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PipelineExecutionPermission
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:techtest-020424-pipeline

  # The rule defining that on creation or update of the reference, the master branch, the target is the pipeline which gets triggered.
  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codecommit
        detail-type:
          - 'CodeCommit Repository State Change'
        resources:
          - !GetAtt CodeCommitRepository.Arn
        detail:
          event:
            - referenceCreated
            - referenceUpdated
          referenceType:
            - branch
          referenceName:
            - !Ref BranchName
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:techtest-020424-pipeline
          # References the EventRole so it has permissions to actually start the pipeline execution
          RoleArn: !GetAtt EventRole.Arn
          Id: triggerPipeline
