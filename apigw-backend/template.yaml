AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

# Parameters for the template. Most of these are retrieved via Systems Manager, stored in the Parameter Store.
# This helps anonymise most of the parameters.
# Defaults have been added as there is the option to add your own parameters with deployment scripts, using --parameter-overrides
Parameters:
  BackendStackName:
    Type: String
    Default: apigw-backend-techtest-020424-stack
    Description: The name of the backend stack which gets deployed.
  TableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: !Sub '/apigw-backend-techtest-020424-stack/TableName'
    Description: DynamoDB Table Name for the backend architecture.
  VPCId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/VPCId'
    Description: The VPC ID where the resources will be deployed.
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/apigw-backend-techtest-020424-stack/PrivateSubnets'
    Description: A list of private subnet IDs for the Lambda function.
  DynamoDBKMSKeyId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/DynamoDBKMSKeyId'
    Description: Optional. ARN of an existing KMS key to use for DynamoDB encryption.
  EnablePointInTimeRecovery:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable Point-in-Time Recovery for DynamoDB table.

Conditions:
  # CreateKMSKey: !Equals [!Ref DynamoDBKMSKeyId, ""]
  IsPITREnabled: !Equals [!Ref EnablePointInTimeRecovery, "true"]
    
Resources:
  # This section defines a route table and associates it with each of the three private subnets being pulled in as a parameter.
  # If deploying in the default VPC, this architecture makes sure that the DynamoDB endpoint can reference the route table directly in its definition.
  # If there was a different number of subnets desired, then this could be instead referenced from a cross-stack where the customized networking gets
  # deployed and then used as Outputs for this stack to reference.
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCId
  # Associations of the Route Table with each Private Subnet
  PrivateSubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [0, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [1, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationThree:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [2, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable
        
  # Security Groups and Ingress/Egress rules.
  # Ingress/egress had to be defined as separate resources to avoid circular dependency issue. 
  # (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html)
  # They are the security groups and rules interacting between the resources of the API Gateway VPC Endpoint, Lambda, and DynamoDB VPC Endpoint.
  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPCId

  LambdaToApiGatewayEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref ApiGatewayVpceSecurityGroup

  DynamoDBEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow inbound from Lambda function
      VpcId: !Ref VPCId

  LambdaToDynamoDBEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref DynamoDBEndpointSecurityGroup

  ApiGatewayVpceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for API Gateway VPC Endpoint allowing ingress from Lambda'
      VpcId: !Ref VPCId

  LambdaToApiGatewayIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ApiGatewayVpceSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  ApiGatewayVpcEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref VPCId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcEndpointType: "Interface"
      SubnetIds: !Ref PrivateSubnets
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ApiGatewayVpceSecurityGroup

  
  # Here is where the private API is defined.
  Techtest020424Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref ApiGatewayVpcEndpoint
      DefinitionBody:
        swagger: "2.0"
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
        #  This was required due to the configuration being PRIVATE, it required this gateway policy, allowing the VPC endpoint for the gateway to invoke it.
        x-amazon-apigateway-policy: 
          Version: "2012-10-17"
          Statement: 
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "execute-api:/*/*/*"
              Condition: 
                StringEquals:
                  aws:sourceVpce: !Ref ApiGatewayVpcEndpoint

  # Here is the DynamoDB table, note the conditional for setting PITR. Currently the architecture has a KMS Master Key as the Server Side Encryption for the table,
  # with the key ID being pulled in via the parameter at the top of the template.
  Techtest020424Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        # Omit this line below if you aren't pulling a KMS key in via a parameter and you just want to use an AWS-managed KMS key, not a CMK.
        KMSMasterKeyId: !Ref DynamoDBKMSKeyId
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsPITREnabled, true, false]

  # Gateway VPC endpoint for the DynamoDB table. Routes have been added above in the routing for the private subnets where the lambda is deployed, to ensure
  # that the lambda can reach this endpoint.
  DynamoDBVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPCId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: 'Gateway'
      RouteTableIds:
        - !Ref PrivateRouteTable
  

 
  # The lambda function definition. It includes SAM policy permissions
  CrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      # Requires that the code has a separate function folder. This function folder is where the TypeScript function code and the relevant build script sits.
      CodeUri: function/
      # References the index.handler in the /function/dist folder. File itself is called index.js but the handler function sits in that file.
      Handler: dist/index.handler
      Runtime: nodejs20.x
      # Extended timeout as I was running into timeout issues. Have left it in for illustrative purposes as the default should work anyway now.
      Timeout: 5
      # Deploys into multiple subnets
      VpcConfig:
        SubnetIds: !Ref PrivateSubnets
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      #  SAM policy permissions for interacting with the table and decrypting the KMS key.
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKMSKeyId
      Events:
        GetItems:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RestApiId: !Ref Techtest020424Api
        CreateItem:
          Type: Api
          Properties:
            Path: /items
            Method: post
            RestApiId: !Ref Techtest020424Api
        GetItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: get
            RestApiId: !Ref Techtest020424Api
        UpdateItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: put
            RestApiId: !Ref Techtest020424Api
        DeleteItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: delete
            RestApiId: !Ref Techtest020424Api

# Outputs the ApiUrl for easy reference, for testing or general usage.
Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for prod stage"
    Value: !Sub "https://${Techtest020424Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"