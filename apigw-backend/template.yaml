AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  BackendStackName:
    Type: String
    Default: apigw-backend-techtest-020424-stack
    Description: The name of the backend stack which gets deployed.
  TableName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: !Sub '/apigw-backend-techtest-020424-stack/TableName'
    Description: DynamoDB Table Name for the backend architecture.
  VPCId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/VPCId'
    Description: The VPC ID where the resources will be deployed.
  PrivateSubnets:
    Type: 'AWS::SSM::Parameter::Value<List<String>>'
    Default: '/apigw-backend-techtest-020424-stack/PrivateSubnets'
    Description: A list of private subnet IDs for the Lambda function.
  DynamoDBKMSKeyId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/apigw-backend-techtest-020424-stack/DynamoDBKMSKeyId'
    Description: Optional. ARN of an existing KMS key to use for DynamoDB encryption.
  EnablePointInTimeRecovery:
    Type: String
    Default: "false"
    AllowedValues:
      - "true"
      - "false"
    Description: Enable Point-in-Time Recovery for DynamoDB table.

Conditions:
  # CreateKMSKey: !Equals [!Ref DynamoDBKMSKeyId, ""]
  IsPITREnabled: !Equals [!Ref EnablePointInTimeRecovery, "true"]
    
Resources:
  # Define a simple route table for the private subnets, to make sure the main one isn't assigned and to allow the DynamoDB endpoint to reference the route table directly in its definition.
  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPCId
  # Associations of the Route Table with each Private Subnet
  PrivateSubnetRouteTableAssociationOne:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [0, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationTwo:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [1, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetRouteTableAssociationThree:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Select [2, !Ref PrivateSubnets]
      RouteTableId: !Ref PrivateRouteTable
        
  # Security Groups and Ingress/Egress rules.
  # Ingress/egress had to be defined as separate resources to avoid circular dependency issue. 
  # (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-ec2-securitygroup.html)

  LambdaSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPCId

  LambdaToApiGatewayEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref ApiGatewayVpceSecurityGroup

  DynamoDBEndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow inbound from Lambda function
      VpcId: !Ref VPCId

  LambdaToDynamoDBEgress:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref LambdaSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      DestinationSecurityGroupId: !Ref DynamoDBEndpointSecurityGroup

  ApiGatewayVpceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for API Gateway VPC Endpoint allowing ingress from Lambda'
      VpcId: !Ref VPCId

  LambdaToApiGatewayIngress:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref ApiGatewayVpceSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId: !Ref LambdaSecurityGroup

  ApiGatewayVpcEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId: !Ref VPCId
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcEndpointType: "Interface"
      SubnetIds: !Ref PrivateSubnets
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref ApiGatewayVpceSecurityGroup

  

  Techtest020424Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      EndpointConfiguration:
        Type: PRIVATE
        VPCEndpointIds:
          - !Ref ApiGatewayVpcEndpoint
      DefinitionBody:
        swagger: "2.0"
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
        x-amazon-apigateway-policy: 
          Version: "2012-10-17"
          Statement: 
            - Effect: "Allow"
              Principal: "*"
              Action: "execute-api:Invoke"
              Resource: "execute-api:/*/*/*"
              Condition: 
                StringEquals:
                  aws:sourceVpce: !Ref ApiGatewayVpcEndpoint

  Techtest020424Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: true
        SSEType: KMS
        KMSMasterKeyId: !Ref DynamoDBKMSKeyId
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsPITREnabled, true, false]

  DynamoDBVpcEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcId: !Ref VPCId
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.dynamodb'
      VpcEndpointType: 'Gateway'
      RouteTableIds:
        - !Ref PrivateRouteTable
  

 

  CrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function/
      Handler: dist/index.handler
      Runtime: nodejs20.x
      Timeout: 5
      VpcConfig:
        SubnetIds: !Ref PrivateSubnets
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TableName
        - KMSDecryptPolicy:
            KeyId: !Ref DynamoDBKMSKeyId
      Events:
        GetItems:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RestApiId: !Ref Techtest020424Api
        CreateItem:
          Type: Api
          Properties:
            Path: /items
            Method: post
            RestApiId: !Ref Techtest020424Api
        GetItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: get
            RestApiId: !Ref Techtest020424Api
        UpdateItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: put
            RestApiId: !Ref Techtest020424Api
        DeleteItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: delete
            RestApiId: !Ref Techtest020424Api

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL for prod stage"
    Value: !Sub "https://${Techtest020424Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"