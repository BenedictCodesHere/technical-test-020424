AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  TableName:
    Type: String
    Default: techtest-table-020424

Resources:
  Techtest020424Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrudFunction.Arn}/invocations

  Techtest020424Table:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  # CrudFunctionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: lambda.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  #     Policies:
  #       - PolicyName: DynamoDBCrudPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - dynamodb:GetItem
  #                 - dynamodb:PutItem
  #                 - dynamodb:UpdateItem
  #                 - dynamodb:DeleteItem
  #               Resource: !GetAtt Techtest020424Table.Arn

  CrudFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: function/
      Handler: dist/index.handler
      Runtime: nodejs20.x
      # Role: !GetAtt CrudFunctionRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref TableName
      Events:
        GetItems:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RestApiId: !Ref Techtest020424Api
        CreateItem:
          Type: Api
          Properties:
            Path: /items
            Method: post
            RestApiId: !Ref Techtest020424Api
        GetItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: get
            RestApiId: !Ref Techtest020424Api
        UpdateItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: put
            RestApiId: !Ref Techtest020424Api
        DeleteItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: delete
            RestApiId: !Ref Techtest020424Api
      Policies:
        - PolicyName: DynamoDBCrudPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                Resource: !GetAtt Techtest020424Table.Arn
Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${Techtest020424Api}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  ApiId:
    Description: "API Gateway ID"
    Value: !Ref Techtest020424Api

  LambdaFunctionArn:
    Description: "Lambda Function ARN"
    Value: !GetAtt CrudFunction.Arn

  DynamoDBTableName:
    Description: "DynamoDB Table Name"
    Value: !Ref Techtest020424Table

  # CrudFunctionRoleArn:
  #   Description: "CRUD Function Role ARN"
  #   Value: !GetAtt CrudFunctionRole.Arn