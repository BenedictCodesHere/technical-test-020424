AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  TableName:
    Type: String
    Default: my-table

Resources:
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      DefinitionBody:
        swagger: "2.0"
        paths:
          /items:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemsFunction.Arn}/invocations
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateItemFunction.Arn}/invocations
          /items/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetItemFunction.Arn}/invocations
            put:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateItemFunction.Arn}/invocations
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteItemFunction.Arn}/invocations

  MyTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  GetItemsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getItems.handler
      Runtime: nodejs14.x
      Events:
        GetItems:
          Type: Api
          Properties:
            Path: /items
            Method: get
            RestApiId: !Ref MyApi
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MyTable

  CreateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: createItem.handler
      Runtime: nodejs14.x
      Events:
        CreateItem:
          Type: Api
          Properties:
            Path: /items
            Method: post
            RestApiId: !Ref MyApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable

  GetItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: getItem.handler
      Runtime: nodejs14.x
      Events:
        GetItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: get
            RestApiId: !Ref MyApi
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref MyTable

  UpdateItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: updateItem.handler
      Runtime: nodejs14.x
      Events:
        UpdateItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: put
            RestApiId: !Ref MyApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable

  DeleteItemFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Handler: deleteItem.handler
      Runtime: nodejs14.x
      Events:
        DeleteItem:
          Type: Api
          Properties:
            Path: /items/{id}
            Method: delete
            RestApiId: !Ref MyApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref MyTable


# This template uses AWS SAM to define a serverless API with CRUD endpoints integrating with Lambda functions and a DynamoDB table. 
# The Lambda functions are assumed to be written in TypeScript and compiled to JavaScript.
# The necessary IAM roles and permissions are assigned to the Lambda functions using the DynamoDBReadPolicy and DynamoDBCrudPolicy SAM policy templates.